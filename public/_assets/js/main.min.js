function Timemap(e){"use strict";function t(e){return e.replace(/Y/,i).replace(/y/,i.toString().substr(2,3)).replace(/mm/,n+1).replace(/MM/,n.toString().length>1?n+1:"0"+(n+1)).replace(/M/,a[n]).replace(/m/,a[n].toString().substr(0,3)).replace(/dd/,r).replace(/DD/,r.toString().length>1?r:"0"+r).replace(/d/,s[o].toString().substr(0,3)).replace(/D/,s[o])}var e=e||new Date,n=e.getMonth(),r=e.getDate(),o=e.getDay(),i=e.getFullYear(),a=(e.getTime(),e.getHours(),e.getMinutes(),e.getSeconds(),["January","February","March","April","May","June","July","August","September","October","November","December"]),s=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];return{date:e,format:t}}!function(){for(var e=0,t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[t[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[t[n]+"CancelAnimationFrame"]||window[t[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var r=(new Date).getTime(),o=Math.max(0,16-(r-e)),i=window.setTimeout(function(){t(r+o)},o);return e=r+o,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),function(){"use strict";function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function n(e){return"object"==typeof e&&null!==e}function r(e,t){Q[U]=e,Q[U+1]=t,U+=2,2===U&&(N?N(u):R())}function o(e){N=e}function i(){var e=process.nextTick,t=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(t)&&"0"===t[1]&&"10"===t[2]&&(e=setImmediate),function(){e(u)}}function a(){return function(){H(u)}}function s(){var e=0,t=new G(u),n=document.createTextNode("");return t.observe(n,{characterData:!0}),function(){n.data=e=++e%2}}function c(){var e=new MessageChannel;return e.port1.onmessage=u,function(){e.port2.postMessage(0)}}function l(){return function(){setTimeout(u,1)}}function u(){for(var e=0;U>e;e+=2){var t=Q[e],n=Q[e+1];t(n),Q[e]=void 0,Q[e+1]=void 0}U=0}function d(){try{var e=require,t=e("vertx");return H=t.runOnLoop||t.runOnContext,a()}catch(n){return l()}}function f(){}function m(){return new TypeError("You cannot resolve a promise with itself")}function p(){return new TypeError("A promises callback cannot return that same promise.")}function v(e){try{return e.then}catch(t){return te.error=t,te}}function y(e,t,n,r){try{e.call(t,n,r)}catch(o){return o}}function g(e,t,n){J(function(e){var r=!1,o=y(n,t,function(n){r||(r=!0,t!==n?b(e,n):E(e,n))},function(t){r||(r=!0,A(e,t))},"Settle: "+(e._label||" unknown promise"));!r&&o&&(r=!0,A(e,o))},e)}function h(e,t){t._state===Z?E(e,t._result):t._state===ee?A(e,t._result):L(t,void 0,function(t){b(e,t)},function(t){A(e,t)})}function w(e,n){if(n.constructor===e.constructor)h(e,n);else{var r=v(n);r===te?A(e,te.error):void 0===r?E(e,n):t(r)?g(e,n,r):E(e,n)}}function b(t,n){t===n?A(t,m()):e(n)?w(t,n):E(t,n)}function _(e){e._onerror&&e._onerror(e._result),T(e)}function E(e,t){e._state===V&&(e._result=t,e._state=Z,0!==e._subscribers.length&&J(T,e))}function A(e,t){e._state===V&&(e._state=ee,e._result=t,J(_,e))}function L(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+Z]=n,o[i+ee]=r,0===i&&e._state&&J(T,e)}function T(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r,o,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?C(n,r,o,i):o(i);e._subscribers.length=0}}function S(){this.error=null}function k(e,t){try{return e(t)}catch(n){return ne.error=n,ne}}function C(e,n,r,o){var i,a,s,c,l=t(r);if(l){if(i=k(r,o),i===ne?(c=!0,a=i.error,i=null):s=!0,n===i)return void A(n,p())}else i=o,s=!0;n._state!==V||(l&&s?b(n,i):c?A(n,a):e===Z?E(n,i):e===ee&&A(n,i))}function q(e,t){try{t(function(t){b(e,t)},function(t){A(e,t)})}catch(n){A(e,n)}}function F(e,t){var n=this;n._instanceConstructor=e,n.promise=new e(f),n._validateInput(t)?(n._input=t,n.length=t.length,n._remaining=t.length,n._init(),0===n.length?E(n.promise,n._result):(n.length=n.length||0,n._enumerate(),0===n._remaining&&E(n.promise,n._result))):A(n.promise,n._validationError())}function Y(e){return new re(this,e).promise}function B(e){function t(e){b(o,e)}function n(e){A(o,e)}var r=this,o=new r(f);if(!z(e))return A(o,new TypeError("You must pass an array to race.")),o;for(var i=e.length,a=0;o._state===V&&i>a;a++)L(r.resolve(e[a]),void 0,t,n);return o}function D(e){var t=this;if(e&&"object"==typeof e&&e.constructor===t)return e;var n=new t(f);return b(n,e),n}function M(e){var t=this,n=new t(f);return A(n,e),n}function O(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function x(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function j(e){this._id=ce++,this._state=void 0,this._result=void 0,this._subscribers=[],f!==e&&(t(e)||O(),this instanceof j||x(),q(this,e))}function I(){var e;if("undefined"!=typeof global)e=global;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=e.Promise;(!n||"[object Promise]"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(e.Promise=le)}var P;P=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var H,N,R,z=P,U=0,J=({}.toString,r),K="undefined"!=typeof window?window:void 0,W=K||{},G=W.MutationObserver||W.WebKitMutationObserver,X="undefined"!=typeof process&&"[object process]"==={}.toString.call(process),$="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3);R=X?i():G?s():$?c():void 0===K&&"function"==typeof require?d():l();var V=void 0,Z=1,ee=2,te=new S,ne=new S;F.prototype._validateInput=function(e){return z(e)},F.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},F.prototype._init=function(){this._result=new Array(this.length)};var re=F;F.prototype._enumerate=function(){for(var e=this,t=e.length,n=e.promise,r=e._input,o=0;n._state===V&&t>o;o++)e._eachEntry(r[o],o)},F.prototype._eachEntry=function(e,t){var r=this,o=r._instanceConstructor;n(e)?e.constructor===o&&e._state!==V?(e._onerror=null,r._settledAt(e._state,t,e._result)):r._willSettleAt(o.resolve(e),t):(r._remaining--,r._result[t]=e)},F.prototype._settledAt=function(e,t,n){var r=this,o=r.promise;o._state===V&&(r._remaining--,e===ee?A(o,n):r._result[t]=n),0===r._remaining&&E(o,r._result)},F.prototype._willSettleAt=function(e,t){var n=this;L(e,void 0,function(e){n._settledAt(Z,t,e)},function(e){n._settledAt(ee,t,e)})};var oe=Y,ie=B,ae=D,se=M,ce=0,le=j;j.all=oe,j.race=ie,j.resolve=ae,j.reject=se,j._setScheduler=o,j._asap=J,j.prototype={constructor:j,then:function(e,t){var n=this,r=n._state;if(r===Z&&!e||r===ee&&!t)return this;var o=new this.constructor(f),i=n._result;if(r){var a=arguments[r-1];J(function(){C(r,o,a,i)})}else L(n,o,e,t);return o},"catch":function(e){return this.then(null,e)}};var ue=I,de={Promise:le,polyfill:ue};"function"==typeof define&&define.amd?define(function(){return de}):"undefined"!=typeof module&&module.exports?module.exports=de:"undefined"!=typeof this&&(this.ES6Promise=de),ue()}.call(this),function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=n.length,o=window.console=window.console||{};r--;)e=n[r],o[e]||(o[e]=t)}(),"undefined"!=typeof module&&module.exports&&(module.exports=Timemap);var kickback=function(e){"use strict";function t(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")}return e={},e.request=function(e){if("string"==typeof e){var n=e;e={},e.url=n,n=null}if(e.url=e.url?e.url:"/",e.data=e.data?e.data:null,e.method=e.method?e.method:"GET",e.headers=e.headers?e.headers:!1,e.cors=e.cors?e.cors:!1,e.async=e.async?e.async:!0,e.serialize=e.serialize?e.serialize:!1,e.auto=e.auto?e.auto:!1,Object.defineProperty(e,"tmp",{configurable:!0,writable:!0}),e.auto===!0)if("undefined"!=typeof window.FormData)if(e.data instanceof HTMLElement)e.data=new FormData(e.data);else{if("object"!=typeof e.data||e.data instanceof Array!=!1)throw new Error("Submit data as object or HTMLElement");e.tmp=e.data,e.data=new FormData,Object.keys(e.tmp).forEach(function(t){e.data.append(t,e.tmp[t])}),delete e.tmp}else e.data instanceof HTMLElement&&(e.tmp={},[].forEach.call(e.data,function(t){e.tmp[t.name]=t.value}),e.data=e.tmp,delete e.tmp),e.serialize=!0;return e.serialize===!0&&(e.data=t(e.data)),console.log(e.data instanceof FormData?"formDATA":"notFormData"),new Promise(function(t,n){var r=new XMLHttpRequest;r.open(e.method,e.url,e.async),r.onload=function(){200==r.status?t(r.response):n(Error("Error: ",r.statusTxt))},r.onerror=function(){n(Error("Network Error"))},e.headers!==!1&&(e.headers.type=e.headers.type||"Content-Type",e.headers.value=e.headers.value||"text/plain;charset=UTF-8",r.setRequestHeader(e.headers.type,e.headers.value)),e.headers===!1&&"post"===e.method.toLowerCase()&&e.serialize===!0&&r.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),r.send("get"===e.method.toLowerCase()?null:e.data)})},e}(kickback);"undefined"!=typeof module&&module.exports&&(module.exports=kickback),function(){"use strict";var e=document.getElementById("contact"),t=document.querySelector('button[type="submit"]');[].forEach.call(e,function(e){"BUTTON"!==e.nodeName&&(e.addEventListener("focus",function(e){var t=e.target.name,n=document.querySelector('label[for="'+t+'"]');n.classList.add("active")},!1),e.addEventListener("blur",function(e){var t=e.target.name,n=document.querySelector('label[for="'+t+'"]');e.target.value.length&&n.classList.add("valid"),e.target.value.length||(n.classList.remove("valid"),n.classList.add("error")),n.classList.remove("active")},!1))}),document.addEventListener("submit",function(n){n.preventDefault();var r={};if([].forEach.call(e,function(e){if("BUTTON"!==e.nodeName)if(""==e.value)r[e.name]="required";else{var t=document.querySelector('label[for="'+e.name+'"]');t.classList.remove("error"),t.classList.add("valid")}}),Object.keys(r).length){for(var o in r)if(r.hasOwnProperty(o)){var i=document.querySelector('label[for="'+o+'"]');i.classList.add("error"),console.log("Error "+o+" "+r[o])}}else document.body.style.cursor="wait",t.setAttribute("disabled",!0),kickback.request({url:"/contact",data:{name_full:e.name_full.value,email:e.email.value,msg:e.msg.value},method:"POST",serialize:!0}).then(function(e){return e.success===!0?(console.log("SUCCESS",e),document.body.style.cursor="initial",t.removeAttribute("disabled")):e.code.length?(console.log("hmmm",e),document.body.style.cursor="initial",t.removeAttribute("disabled")):(console.log("dang",e),document.body.style.cursor="initial",t.removeAttribute("disabled")),e})["catch"](function(e){return new Error("Prom fail: ",e)})},!1)}(),function(e){"use strict";function t(){c=e.scrollY,console.log("set cache Y",c)}function n(){console.log("scrolling stopped"),console.log("dir",i),"down"==i&&(u.classList.remove("active"),d.classList.add("hide-nav"))}function r(e){e?(console.log("SKILLS in view add list"),Array.prototype.forEach.call(l,function(e){e.classList.add("active")})):(console.log("SKILLS NOT view remove list"),Array.prototype.forEach.call(l,function(e){e.classList.remove("active")}))}function o(t){if("string"==typeof t){var n=document.querySelector('a[href="'+t+'"]');t=document.querySelector(t)}if(!t)return!1;var r=t.getBoundingClientRect();return r.top>e.innerHeight-150||r.bottom<150?(console.log(t,"is NOT in view"),t.classList.contains("in-view")&&t.classList.remove("in-view"),n.classList.contains("active-nav")&&n.classList.remove("active-nav"),!1):(console.log(t,"is in view"),console.log(n,"is active"),t.classList.add("in-view"),n.classList.add("active-nav"),!0)}var i,a=null,s=null,c=0,l=document.querySelectorAll(".skill-bar"),u=document.querySelector('ul[role="menubar"]'),d=document.getElementById("main-nav"),f=document.getElementById("masthead"),m=["#about","#work","#skills","#projects","#education"],p="#eaeaea",v="#AFB4D8",y="#6F94BE",g="#6EAEB3",h="#66CF97",w="#49DB45",b="#1DE410";e.onscroll=function(l){null!=a&&clearTimeout(a),null!=s&&clearTimeout(s),c<e.scrollY&&(i="down"),c>e.scrollY&&(i="up",d.classList.remove("hide-nav")),a=setTimeout(n,500),s=setTimeout(t,100),0==e.scrollY&&(f.style.backgroundColor=p),e.scrollY>0&&e.scrollY<=20&&(f.style.backgroundColor=v),e.scrollY>=21&&e.scrollY<=40&&(f.style.backgroundColor=y),e.scrollY>=41&&e.scrollY<=60&&(f.style.backgroundColor=g),e.scrollY>=61&&e.scrollY<=80&&(f.style.backgroundColor=h),e.scrollY>=81&&e.scrollY<=100&&(f.style.backgroundColor=w),e.scrollY>=101&&e.scrollY<=120&&(f.style.backgroundColor=b),e.scrollY>=121&&(f.style.backgroundColor=p),m.forEach(function(e){o(e),"#skills"==e&&r(o(e)?!0:!1)})}}(window),function(){"use strict";var e=function(e,t,n){var r,o,i=window.pageYOffset,a=e.offsetTop,s=a-i,c=s/(t/16);n>0&&(a-=n);var l=function(){window.scrollBy(0,c),o=window.pageYOffset,r=requestAnimationFrame(l),c>=0?(o>=a-c||window.innerHeight+o>=document.body.offsetHeight)&&cancelAnimationFrame(r):(a||0)>=o&&cancelAnimationFrame(r)};r=requestAnimationFrame(l)};document.addEventListener("click",function(t){if(t.target&&"A"==t.target.nodeName&&t.target.classList.contains("scroll")){t.preventDefault();var n=t.target.getAttribute("href"),r=document.querySelector(n),o=t.target.getAttribute("data-scroll-speed")?t.target.getAttribute("data-scroll-speed"):500,i=t.target.getAttribute("data-scroll-offset")?t.target.getAttribute("data-scroll-offset"):0;r&&e(r,o,i)}},!1)}(),window.addEventListener("load",function(){function e(e,t){for(var t=t||3,r=0;t>r;r++){var o=document.createElement("div");o.classList.add("alert"),o.innerHTML=e[r].content[0]._,n.appendChild(o)}}var t,n=document.getElementById("feed");kickback.request({url:"/feed",method:"GET"}).then(function(n){t=JSON.parse(n);var r=t.feed.entry;e(r,6)})["catch"](function(e){return e})},!1),function(e){function t(){e.innerWidth<740?c.classList.contains("side-menu")||(c.classList.add("side-menu"),s.removeChild(c),l.appendChild(c)):c.classList.contains("side-menu")&&(l.removeChild(c),s.insertBefore(c,a),c.classList.remove("side-menu"))}var n=document.getElementById("toggle-code"),r=document.getElementById("code-about"),o=document.getElementById("bare-about"),i=document.getElementById("about"),a=document.getElementById("menu-btn"),s=document.getElementById("main-nav"),c=document.querySelector('ul[role="menubar"]'),l=document.getElementById("masthead");a.addEventListener("click",function(e){a.classList.toggle("active"),c.classList.toggle("active")},!1),n.addEventListener("click",function(t){{var n=i.getBoundingClientRect();o.getBoundingClientRect()}if(t.target.classList.contains("active")){t.target.classList.remove("active"),r.classList.remove("active");var a=e.setTimeout(function(){r.style.display="none",o.style.display="inline-block",e.clearTimeout(a)},1100)}else{r.style.top="0px",r.style.right="-"+n.width+"px",r.style.display="inline-block",o.style.left="-"+n.width+"px";var a=e.setTimeout(function(){o.style.display="none",r.classList.add("active"),e.clearTimeout(a)},500);t.target.classList.add("active")}},!1),e.addEventListener("load",t,!1),e.onresize=t}(window);
//# sourceMappingURL=data:application/json;base64,