function Timemap(e){"use strict";function t(e){return e.replace(/Y/,i).replace(/y/,i.toString().substr(2,3)).replace(/mm/,n+1).replace(/MM/,n.toString().length>1?n+1:"0"+(n+1)).replace(/M/,a[n]).replace(/m/,a[n].toString().substr(0,3)).replace(/dd/,r).replace(/DD/,r.toString().length>1?r:"0"+r).replace(/d/,s[o].toString().substr(0,3)).replace(/D/,s[o])}var e=e||new Date,n=e.getMonth(),r=e.getDate(),o=e.getDay(),i=e.getFullYear(),a=(e.getTime(),e.getHours(),e.getMinutes(),e.getSeconds(),["January","February","March","April","May","June","July","August","September","October","November","December"]),s=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];return{date:e,format:t}}!function(){for(var e=0,t=["webkit","moz"],n=0;n<t.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[t[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[t[n]+"CancelAnimationFrame"]||window[t[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t,n){var r=(new Date).getTime(),o=Math.max(0,16-(r-e)),i=window.setTimeout(function(){t(r+o)},o);return e=r+o,i}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),function(){"use strict";function e(e){return"function"==typeof e||"object"==typeof e&&null!==e}function t(e){return"function"==typeof e}function n(e){return"object"==typeof e&&null!==e}function r(e,t){Q[U]=e,Q[U+1]=t,U+=2,2===U&&(R?R(l):z())}function o(e){R=e}function i(){var e=process.nextTick,t=process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);return Array.isArray(t)&&"0"===t[1]&&"10"===t[2]&&(e=setImmediate),function(){e(l)}}function a(){return function(){I(l)}}function s(){var e=0,t=new K(l),n=document.createTextNode("");return t.observe(n,{characterData:!0}),function(){n.data=e=++e%2}}function c(){var e=new MessageChannel;return e.port1.onmessage=l,function(){e.port2.postMessage(0)}}function u(){return function(){setTimeout(l,1)}}function l(){for(var e=0;U>e;e+=2){var t=Q[e],n=Q[e+1];t(n),Q[e]=void 0,Q[e+1]=void 0}U=0}function d(){try{var e=require,t=e("vertx");return I=t.runOnLoop||t.runOnContext,a()}catch(n){return u()}}function f(){}function m(){return new TypeError("You cannot resolve a promise with itself")}function p(){return new TypeError("A promises callback cannot return that same promise.")}function h(e){try{return e.then}catch(t){return te.error=t,te}}function y(e,t,n,r){try{e.call(t,n,r)}catch(o){return o}}function v(e,t,n){J(function(e){var r=!1,o=y(n,t,function(n){r||(r=!0,t!==n?b(e,n):A(e,n))},function(t){r||(r=!0,E(e,t))},"Settle: "+(e._label||" unknown promise"));!r&&o&&(r=!0,E(e,o))},e)}function g(e,t){t._state===Z?A(e,t._result):t._state===ee?E(e,t._result):T(t,void 0,function(t){b(e,t)},function(t){E(e,t)})}function w(e,n){if(n.constructor===e.constructor)g(e,n);else{var r=h(n);r===te?E(e,te.error):void 0===r?A(e,n):t(r)?v(e,n,r):A(e,n)}}function b(t,n){t===n?E(t,m()):e(n)?w(t,n):A(t,n)}function _(e){e._onerror&&e._onerror(e._result),k(e)}function A(e,t){e._state===V&&(e._result=t,e._state=Z,0!==e._subscribers.length&&J(k,e))}function E(e,t){e._state===V&&(e._state=ee,e._result=t,J(_,e))}function T(e,t,n,r){var o=e._subscribers,i=o.length;e._onerror=null,o[i]=t,o[i+Z]=n,o[i+ee]=r,0===i&&e._state&&J(k,e)}function k(e){var t=e._subscribers,n=e._state;if(0!==t.length){for(var r,o,i=e._result,a=0;a<t.length;a+=3)r=t[a],o=t[a+n],r?F(n,r,o,i):o(i);e._subscribers.length=0}}function S(){this.error=null}function C(e,t){try{return e(t)}catch(n){return ne.error=n,ne}}function F(e,n,r,o){var i,a,s,c,u=t(r);if(u){if(i=C(r,o),i===ne?(c=!0,a=i.error,i=null):s=!0,n===i)return void E(n,p())}else i=o,s=!0;n._state!==V||(u&&s?b(n,i):c?E(n,a):e===Z?A(n,i):e===ee&&E(n,i))}function Y(e,t){try{t(function(t){b(e,t)},function(t){E(e,t)})}catch(n){E(e,n)}}function q(e,t){var n=this;n._instanceConstructor=e,n.promise=new e(f),n._validateInput(t)?(n._input=t,n.length=t.length,n._remaining=t.length,n._init(),0===n.length?A(n.promise,n._result):(n.length=n.length||0,n._enumerate(),0===n._remaining&&A(n.promise,n._result))):E(n.promise,n._validationError())}function D(e){return new re(this,e).promise}function M(e){function t(e){b(o,e)}function n(e){E(o,e)}var r=this,o=new r(f);if(!N(e))return E(o,new TypeError("You must pass an array to race.")),o;for(var i=e.length,a=0;o._state===V&&i>a;a++)T(r.resolve(e[a]),void 0,t,n);return o}function j(e){var t=this;if(e&&"object"==typeof e&&e.constructor===t)return e;var n=new t(f);return b(n,e),n}function O(e){var t=this,n=new t(f);return E(n,e),n}function x(){throw new TypeError("You must pass a resolver function as the first argument to the promise constructor")}function L(){throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.")}function P(e){this._id=ce++,this._state=void 0,this._result=void 0,this._subscribers=[],f!==e&&(t(e)||x(),this instanceof P||L(),Y(this,e))}function H(){var e;if("undefined"!=typeof global)e=global;else if("undefined"!=typeof self)e=self;else try{e=Function("return this")()}catch(t){throw new Error("polyfill failed because global object is unavailable in this environment")}var n=e.Promise;(!n||"[object Promise]"!==Object.prototype.toString.call(n.resolve())||n.cast)&&(e.Promise=ue)}var B;B=Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)};var I,R,z,N=B,U=0,J=({}.toString,r),G="undefined"!=typeof window?window:void 0,W=G||{},K=W.MutationObserver||W.WebKitMutationObserver,X="undefined"!=typeof process&&"[object process]"==={}.toString.call(process),$="undefined"!=typeof Uint8ClampedArray&&"undefined"!=typeof importScripts&&"undefined"!=typeof MessageChannel,Q=new Array(1e3);z=X?i():K?s():$?c():void 0===G&&"function"==typeof require?d():u();var V=void 0,Z=1,ee=2,te=new S,ne=new S;q.prototype._validateInput=function(e){return N(e)},q.prototype._validationError=function(){return new Error("Array Methods must be provided an Array")},q.prototype._init=function(){this._result=new Array(this.length)};var re=q;q.prototype._enumerate=function(){for(var e=this,t=e.length,n=e.promise,r=e._input,o=0;n._state===V&&t>o;o++)e._eachEntry(r[o],o)},q.prototype._eachEntry=function(e,t){var r=this,o=r._instanceConstructor;n(e)?e.constructor===o&&e._state!==V?(e._onerror=null,r._settledAt(e._state,t,e._result)):r._willSettleAt(o.resolve(e),t):(r._remaining--,r._result[t]=e)},q.prototype._settledAt=function(e,t,n){var r=this,o=r.promise;o._state===V&&(r._remaining--,e===ee?E(o,n):r._result[t]=n),0===r._remaining&&A(o,r._result)},q.prototype._willSettleAt=function(e,t){var n=this;T(e,void 0,function(e){n._settledAt(Z,t,e)},function(e){n._settledAt(ee,t,e)})};var oe=D,ie=M,ae=j,se=O,ce=0,ue=P;P.all=oe,P.race=ie,P.resolve=ae,P.reject=se,P._setScheduler=o,P._asap=J,P.prototype={constructor:P,then:function(e,t){var n=this,r=n._state;if(r===Z&&!e||r===ee&&!t)return this;var o=new this.constructor(f),i=n._result;if(r){var a=arguments[r-1];J(function(){F(r,o,a,i)})}else T(n,o,e,t);return o},"catch":function(e){return this.then(null,e)}};var le=H,de={Promise:ue,polyfill:le};"function"==typeof define&&define.amd?define(function(){return de}):"undefined"!=typeof module&&module.exports?module.exports=de:"undefined"!=typeof this&&(this.ES6Promise=de),le()}.call(this),function(){for(var e,t=function(){},n=["assert","clear","count","debug","dir","dirxml","error","exception","group","groupCollapsed","groupEnd","info","log","markTimeline","profile","profileEnd","table","time","timeEnd","timeline","timelineEnd","timeStamp","trace","warn"],r=n.length,o=window.console=window.console||{};r--;)e=n[r],o[e]||(o[e]=t)}(),"undefined"!=typeof module&&module.exports&&(module.exports=Timemap);var kickback=function(e){"use strict";function t(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t.join("&")}return e={},e.request=function(e){if("string"==typeof e){var n=e;e={},e.url=n,n=null}if(e.url=e.url?e.url:"/",e.data=e.data?e.data:null,e.method=e.method?e.method:"GET",e.headers=e.headers?e.headers:!1,e.cors=e.cors?e.cors:!1,e.async=e.async?e.async:!0,e.serialize=e.serialize?e.serialize:!1,e.auto=e.auto?e.auto:!1,Object.defineProperty(e,"tmp",{configurable:!0,writable:!0}),e.auto===!0)if("undefined"!=typeof window.FormData)if(e.data instanceof HTMLElement)e.data=new FormData(e.data);else{if("object"!=typeof e.data||e.data instanceof Array!=!1)throw new Error("Submit data as object or HTMLElement");e.tmp=e.data,e.data=new FormData,Object.keys(e.tmp).forEach(function(t){e.data.append(t,e.tmp[t])}),delete e.tmp}else e.data instanceof HTMLElement&&(e.tmp={},[].forEach.call(e.data,function(t){e.tmp[t.name]=t.value}),e.data=e.tmp,delete e.tmp),e.serialize=!0;return e.serialize===!0&&(e.data=t(e.data)),console.log(e.data instanceof FormData?"formDATA":"notFormData"),new Promise(function(t,n){var r=new XMLHttpRequest;r.open(e.method,e.url,e.async),r.onload=function(){200==r.status?t(r.response):n(Error("Error: ",r.statusTxt))},r.onerror=function(){n(Error("Network Error"))},e.headers!==!1&&(e.headers.type=e.headers.type||"Content-Type",e.headers.value=e.headers.value||"text/plain;charset=UTF-8",r.setRequestHeader(e.headers.type,e.headers.value)),e.headers===!1&&"post"===e.method.toLowerCase()&&e.serialize===!0&&r.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),r.send("get"===e.method.toLowerCase()?null:e.data)})},e}(kickback);"undefined"!=typeof module&&module.exports&&(module.exports=kickback),function(){"use strict";document.addEventListener("submit",function(e){e.preventDefault();var t=document.querySelector("form#contact"),n={};if([].forEach.call(t,function(e){""==e.value&&(n[e.name]="required")}),Object.keys(n).length)for(var r in n)n.hasOwnProperty(r)&&console.log("Error "+r+" "+n[r]);else kickback.request({url:"/contact",data:t,method:"POST",auto:!0}).then(function(e){return e.success===!0?console.log("SUCCESS"):console.log("hmmm",e),e})["catch"](function(e){return new Error("Prom fail: ",e)})},!1)}(),function(e){"use strict";function t(){a=e.scrollY,console.log("set cache Y",a)}function n(){console.log("scrolling stopped")}function r(t){if("string"==typeof t&&(t=document.querySelector(t)),!t)return!1;var n=t.getBoundingClientRect();return n.top>e.innerHeight||n.bottom<0?(console.log(t,"is NOT in view"),t.classList.contains("in-view")&&t.classList.remove("in-view"),!1):(console.log(t,"is in view"),t.classList.add("in-view"),!0)}var o=null,i=null,a=0,s=(document.querySelector('ul[role="menubar"]'),document.getElementById("main-nav")),c=document.getElementById("masthead"),u=["#about","#work","#projects"],l="#eaeaea",d="#AFB4D8",f="#6F94BE",m="#6EAEB3",p="#66CF97",h="#49DB45",y="#1DE410";e.onscroll=function(v){null!=o&&clearTimeout(o),null!=i&&clearTimeout(i),a<e.scrollY&&s.classList.add("hide-nav"),a>e.scrollY&&s.classList.remove("hide-nav"),o=setTimeout(n,1500),i=setTimeout(t,100),0==e.scrollY&&(c.style.backgroundColor=l),e.scrollY>0&&e.scrollY<=20&&(c.style.backgroundColor=d),e.scrollY>=21&&e.scrollY<=40&&(c.style.backgroundColor=f),e.scrollY>=41&&e.scrollY<=60&&(c.style.backgroundColor=m),e.scrollY>=61&&e.scrollY<=80&&(c.style.backgroundColor=p),e.scrollY>=81&&e.scrollY<=100&&(c.style.backgroundColor=h),e.scrollY>=101&&e.scrollY<=120&&(c.style.backgroundColor=y),e.scrollY>=121&&(c.style.backgroundColor=l),u.forEach(function(e){r(e)})}}(window),function(){"use strict";var e=function(e,t,n){var r,o,i=window.pageYOffset,a=e.offsetTop,s=a-i,c=s/(t/16);n>0&&(a-=n);var u=function(){window.scrollBy(0,c),o=window.pageYOffset,r=requestAnimationFrame(u),c>=0?(o>=a-c||window.innerHeight+o>=document.body.offsetHeight)&&cancelAnimationFrame(r):(a||0)>=o&&cancelAnimationFrame(r)};r=requestAnimationFrame(u)};document.addEventListener("click",function(t){if(t.target&&"A"==t.target.nodeName&&t.target.classList.contains("scroll")){t.preventDefault();var n=t.target.getAttribute("href"),r=document.querySelector(n),o=t.target.getAttribute("data-scroll-speed")?t.target.getAttribute("data-scroll-speed"):500,i=t.target.getAttribute("data-scroll-offset")?t.target.getAttribute("data-scroll-offset"):!1;r&&e(r,o,i)}},!1)}(),window.onload=function(){function e(e){for(var t=0;3>t;t++){var r=document.createElement("div");r.innerHTML=e[t].content[0]._,n.appendChild(r)}}var t,n=document.getElementById("feed");kickback.request({url:"/feed",method:"GET"}).then(function(n){t=JSON.parse(n);{var r=t.feed.entry;t.feed.entry[0].content[0]._}console.log(t.feed.entry[0].content[0]._),e(r)})["catch"](function(e){return e})};
//# sourceMappingURL=data:application/json;base64,